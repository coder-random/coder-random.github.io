{"title":"算法复杂度一览表","uid":"ffcfdc2657e27f0f1d5678cd568c11ab","slug":"AlgorithmsDataStructures/其他/算法复杂度一览表","date":"2025-07-14T16:00:00.000Z","updated":"2025-07-17T14:47:51.363Z","comments":true,"path":"api/articles/AlgorithmsDataStructures/其他/算法复杂度一览表.json","keywords":null,"cover":null,"content":"<h1 id=\"时间空间复杂度常见情况\"><a href=\"#时间空间复杂度常见情况\" class=\"headerlink\" title=\"时间空间复杂度常见情况\"></a>时间空间复杂度常见情况</h1><h2 id=\"🧊时间\"><a href=\"#🧊时间\" class=\"headerlink\" title=\"🧊时间\"></a>🧊时间</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>记号</th>\n<th>说明</th>\n<th>典型例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>常数阶</td>\n<td>O(1)</td>\n<td>不随输入规模变化</td>\n<td>访问数组某个元素</td>\n</tr>\n<tr>\n<td>对数阶</td>\n<td>O(log n)</td>\n<td>输入每次减半</td>\n<td>二分查找、平衡二叉搜索树操作</td>\n</tr>\n<tr>\n<td>线性阶</td>\n<td>O(n)</td>\n<td>遍历整个输入</td>\n<td>顺序查找、遍历数组</td>\n</tr>\n<tr>\n<td>线性对数阶</td>\n<td>O(n log n)</td>\n<td>分治递归 + 遍历</td>\n<td>快排、归并排序、堆排序</td>\n</tr>\n<tr>\n<td>平方阶</td>\n<td>O(n²)</td>\n<td>嵌套两层循环</td>\n<td>冒泡排序、选择排序、插入排序</td>\n</tr>\n<tr>\n<td>立方阶</td>\n<td>O(n³)</td>\n<td>三层嵌套循环</td>\n<td>Floyd 最短路径</td>\n</tr>\n<tr>\n<td>指数阶</td>\n<td>O(2ⁿ)</td>\n<td>枚举所有组合</td>\n<td>子集生成、背包问题暴力递归</td>\n</tr>\n<tr>\n<td>阶乘阶</td>\n<td>O(n!)</td>\n<td>全排列枚举</td>\n<td>旅行商问题暴力解、n皇后问题</td>\n</tr>\n</tbody></table>\n<h2 id=\"🧊-空间\"><a href=\"#🧊-空间\" class=\"headerlink\" title=\"🧊 空间\"></a>🧊 空间</h2><table>\n<thead>\n<tr>\n<th>空间复杂度</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(1)</td>\n<td>原地排序、双指针、滑动窗口</td>\n</tr>\n<tr>\n<td>O(n)</td>\n<td>需要额外数组、哈希表、栈、队列</td>\n</tr>\n<tr>\n<td>O(n²)</td>\n<td>二维矩阵（如图算法、DP表）</td>\n</tr>\n</tbody></table>\n<h2 id=\"💡-小技巧：估算能不能过\"><a href=\"#💡-小技巧：估算能不能过\" class=\"headerlink\" title=\"💡 小技巧：估算能不能过\"></a>💡 小技巧：估算能不能过</h2><table>\n<thead>\n<tr>\n<th>输入规模 n</th>\n<th>推荐算法复杂度上限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>n ≤ 10</td>\n<td>O(n!) 可接受</td>\n</tr>\n<tr>\n<td>n ≤ 20</td>\n<td>O(2ⁿ) 可接受</td>\n</tr>\n<tr>\n<td>n ≤ 1e2</td>\n<td>O(n³) 可接受</td>\n</tr>\n<tr>\n<td>n ≤ 1e4</td>\n<td>O(n²) 可接受</td>\n</tr>\n<tr>\n<td>n ≤ 1e5</td>\n<td>O(n log n) 必须</td>\n</tr>\n<tr>\n<td>n ≤ 1e6</td>\n<td>O(n) 最佳</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"算法与数据结构复杂度一览表\"><a href=\"#算法与数据结构复杂度一览表\" class=\"headerlink\" title=\"算法与数据结构复杂度一览表\"></a>算法与数据结构复杂度一览表</h1><p>本表系统整理了算法复杂度的核心概念及常见算法&#x2F;数据结构在时间和空间复杂度上的表现，便于查阅和对比。</p>\n<hr>\n<h2 id=\"一、什么是算法复杂度？\"><a href=\"#一、什么是算法复杂度？\" class=\"headerlink\" title=\"一、什么是算法复杂度？\"></a>一、什么是算法复杂度？</h2><p>算法复杂度是衡量算法性能的重要指标，主要包括<strong>时间复杂度</strong>（执行所需时间）和<strong>空间复杂度</strong>（所需内存），常用**大O表示法（Big O Notation）**描述在最坏情况下的上界。</p>\n<hr>\n<h2 id=\"二、常见时间复杂度和空间复杂度\"><a href=\"#二、常见时间复杂度和空间复杂度\" class=\"headerlink\" title=\"二、常见时间复杂度和空间复杂度\"></a>二、常见时间复杂度和空间复杂度</h2><table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>名称</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>O(1)</td>\n<td>常数</td>\n<td>数组访问、哈希查找</td>\n</tr>\n<tr>\n<td>O(log n)</td>\n<td>对数</td>\n<td>二分查找</td>\n</tr>\n<tr>\n<td>O(n)</td>\n<td>线性</td>\n<td>遍历数组</td>\n</tr>\n<tr>\n<td>O(n log n)</td>\n<td>线性对数</td>\n<td>归并排序、快速排序</td>\n</tr>\n<tr>\n<td>O(n²)</td>\n<td>平方</td>\n<td>冒泡排序、插入排序</td>\n</tr>\n<tr>\n<td>O(2ⁿ)</td>\n<td>指数</td>\n<td>递归斐波那契、子集生成</td>\n</tr>\n<tr>\n<td>O(n!)</td>\n<td>阶乘</td>\n<td>全排列问题</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"三、排序算法复杂度\"><a href=\"#三、排序算法复杂度\" class=\"headerlink\" title=\"三、排序算法复杂度\"></a>三、排序算法复杂度</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n)</td>\n<td>O(n²)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n<td>O(n²)</td>\n<td>O(log n)</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n<td>O(n log n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>O(n + k)</td>\n<td>O(n + k)</td>\n<td>O(n + k)</td>\n<td>O(n + k)</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>O(nk)</td>\n<td>O(nk)</td>\n<td>O(nk)</td>\n<td>O(n + k)</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>O(n)</td>\n<td>O(n + k)</td>\n<td>O(n²)</td>\n<td>O(n + k)</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O(n log n)</td>\n<td>O(n log² n)</td>\n<td>O(n²)</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"四、查找算法复杂度\"><a href=\"#四、查找算法复杂度\" class=\"headerlink\" title=\"四、查找算法复杂度\"></a>四、查找算法复杂度</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线性查找</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>二分查找</td>\n<td>O(1)</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>跳跃查找</td>\n<td>O(1)</td>\n<td>O(√n)</td>\n<td>O(√n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>插值查找</td>\n<td>O(1)</td>\n<td>O(log log n)</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>哈希查找</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"五、线性数据结构复杂度\"><a href=\"#五、线性数据结构复杂度\" class=\"headerlink\" title=\"五、线性数据结构复杂度\"></a>五、线性数据结构复杂度</h2><table>\n<thead>\n<tr>\n<th>结构&#x2F;操作</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数组-访问</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>数组-插入&#x2F;删除</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>链表-访问</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>链表-插入&#x2F;删除</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>栈&#x2F;队列-操作</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"六、树形数据结构复杂度\"><a href=\"#六、树形数据结构复杂度\" class=\"headerlink\" title=\"六、树形数据结构复杂度\"></a>六、树形数据结构复杂度</h2><table>\n<thead>\n<tr>\n<th>结构&#x2F;操作</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>二叉搜索树-查找</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>AVL树&#x2F;红黑树</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>堆-操作</td>\n<td>O(1)</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Trie树-操作</td>\n<td>O(m)</td>\n<td>O(m)</td>\n<td>O(m)</td>\n<td>O(nm)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"七、图形数据结构复杂度\"><a href=\"#七、图形数据结构复杂度\" class=\"headerlink\" title=\"七、图形数据结构复杂度\"></a>七、图形数据结构复杂度</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>邻接矩阵 - 访问&#x2F;搜索&#x2F;插入&#x2F;删除</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(V²)</td>\n</tr>\n<tr>\n<td>邻接矩阵 - 遍历</td>\n<td>O(V²)</td>\n<td>O(V²)</td>\n<td>O(V²)</td>\n<td>O(V²)</td>\n</tr>\n<tr>\n<td>邻接表 - 访问</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(V)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>邻接表 - 搜索</td>\n<td>O(1)</td>\n<td>O(V)</td>\n<td>O(V)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>邻接表 - 插入</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>邻接表 - 删除</td>\n<td>O(1)</td>\n<td>O(E)</td>\n<td>O(E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>邻接表 - 遍历</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>边列表 - 访问&#x2F;搜索</td>\n<td>O(1)</td>\n<td>O(E)</td>\n<td>O(E)</td>\n<td>O(E)</td>\n</tr>\n<tr>\n<td>边列表 - 插入&#x2F;删除</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(E)</td>\n</tr>\n<tr>\n<td>边列表 - 遍历</td>\n<td>O(E)</td>\n<td>O(E)</td>\n<td>O(E)</td>\n<td>O(E)</td>\n</tr>\n<tr>\n<td>有向&#x2F;无向&#x2F;加权图-基本操作</td>\n<td>O(1)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>有向无环图(DAG)-基本操作</td>\n<td>O(1)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：V为顶点数，E为边数。</p></blockquote>\n<hr>\n<h2 id=\"八、哈希与映射\"><a href=\"#八、哈希与映射\" class=\"headerlink\" title=\"八、哈希与映射\"></a>八、哈希与映射</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>哈希表-操作</td>\n<td>O(1)</td>\n<td>O(1)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>布隆过滤器</td>\n<td>O(k)</td>\n<td>O(k)</td>\n<td>O(k)</td>\n<td>O(m)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"九、高级数据结构\"><a href=\"#九、高级数据结构\" class=\"headerlink\" title=\"九、高级数据结构\"></a>九、高级数据结构</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>并查集</td>\n<td>O(1)</td>\n<td>O(α(n))</td>\n<td>O(α(n))</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>跳表</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"十、图论算法\"><a href=\"#十、图论算法\" class=\"headerlink\" title=\"十、图论算法\"></a>十、图论算法</h2><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BFS&#x2F;DFS</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V)</td>\n</tr>\n<tr>\n<td>Dijkstra</td>\n<td>O(V²+E)</td>\n<td>O(V²+E)</td>\n<td>O(V²+E)</td>\n<td>O(V)</td>\n</tr>\n<tr>\n<td>Bellman-Ford</td>\n<td>O(VE)</td>\n<td>O(VE)</td>\n<td>O(VE)</td>\n<td>O(V)</td>\n</tr>\n<tr>\n<td>Floyd-Warshall</td>\n<td>O(V³)</td>\n<td>O(V³)</td>\n<td>O(V³)</td>\n<td>O(V²)</td>\n</tr>\n<tr>\n<td>Kruskal</td>\n<td>O(E log E)</td>\n<td>O(E log E)</td>\n<td>O(E log E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>Prim</td>\n<td>O(E log V)</td>\n<td>O(E log V)</td>\n<td>O(E log V)</td>\n<td>O(V)</td>\n</tr>\n<tr>\n<td>拓扑排序</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n<td>O(V)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"十一、字符串和数论算法\"><a href=\"#十一、字符串和数论算法\" class=\"headerlink\" title=\"十一、字符串和数论算法\"></a>十一、字符串和数论算法</h2><h3 id=\"字符串算法\"><a href=\"#字符串算法\" class=\"headerlink\" title=\"字符串算法\"></a>字符串算法</h3><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>KMP算法</td>\n<td>O(n)</td>\n<td>O(m+n)</td>\n<td>O(m+n)</td>\n<td>O(m)</td>\n</tr>\n<tr>\n<td>Rabin-Karp算法</td>\n<td>O(n)</td>\n<td>O(m+n)</td>\n<td>O(mn)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Boyer-Moore算法</td>\n<td>O(n&#x2F;m)</td>\n<td>O(n)</td>\n<td>O(mn)</td>\n<td>O(m)</td>\n</tr>\n</tbody></table>\n<h3 id=\"数论算法\"><a href=\"#数论算法\" class=\"headerlink\" title=\"数论算法\"></a>数论算法</h3><table>\n<thead>\n<tr>\n<th>算法名称</th>\n<th>最佳</th>\n<th>平均</th>\n<th>最差</th>\n<th>空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>欧几里得算法(GCD)</td>\n<td>O(1)</td>\n<td>O(log min(a,b))</td>\n<td>O(log min(a,b))</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>快速幂</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(log n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>埃拉托斯特尼筛法</td>\n<td>O(n log log n)</td>\n<td>O(n log log n)</td>\n<td>O(n log log n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>模逆元计算</td>\n<td>O(n³)</td>\n<td>O(n³)</td>\n<td>O(n³)</td>\n<td>O(n²)</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"十二、复杂度分析与算法选择建议\"><a href=\"#十二、复杂度分析与算法选择建议\" class=\"headerlink\" title=\"十二、复杂度分析与算法选择建议\"></a>十二、复杂度分析与算法选择建议</h2><ul>\n<li>根据输入数据规模、时间效率要求、内存限制等选取算法；</li>\n<li>合理利用空间换时间、分治、动态规划等优化策略；</li>\n<li>选择适合场景的数据结构（如查找优先用哈希&#x2F;二分查找，稀疏图用邻接表等）。</li>\n</ul>\n<hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本表仅供速查，实际复杂度可能因具体实现、输入分布和硬件环境而有所不同。</p></blockquote>\n","text":"本文为你系统梳理常见的时间复杂度与空间复杂度，帮助你快速判断算法的性能优劣。 你将看到从 O(1) 常数级别到 O(n!) 阶乘级别的各类复杂度，以及它们在实际算法中的典型例子。 通过图示、表格与实例，我们将帮助你构建起扎实的复杂度分析直觉，为今后的算法设计与面试笔试打下坚实基础。 不论你是初学者还是进阶选手，这份复杂度一览表都值得你收藏与反复参考。 ...","permalink":"/post/AlgorithmsDataStructures/其他/算法复杂度一览表","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"算法与数据结构","slug":"算法与数据结构","count":3,"path":"api/categories/算法与数据结构.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%B8%B8%E8%A7%81%E6%83%85%E5%86%B5\"><span class=\"toc-text\">时间空间复杂度常见情况</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%F0%9F%A7%8A%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">🧊时间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%F0%9F%A7%8A-%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">🧊 空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%F0%9F%92%A1-%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E4%BC%B0%E7%AE%97%E8%83%BD%E4%B8%8D%E8%83%BD%E8%BF%87\"><span class=\"toc-text\">💡 小技巧：估算能不能过</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%80%E8%A7%88%E8%A1%A8\"><span class=\"toc-text\">算法与数据结构复杂度一览表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9F\"><span class=\"toc-text\">一、什么是算法复杂度？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">二、常见时间复杂度和空间复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">三、排序算法复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">四、查找算法复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E7%BA%BF%E6%80%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">五、线性数据结构复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">六、树形数据结构复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">七、图形数据结构复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E5%93%88%E5%B8%8C%E4%B8%8E%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">八、哈希与映射</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">九、高级数据结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">十、图论算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E4%B8%80%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E8%AE%BA%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">十一、字符串和数论算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">字符串算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E8%AE%BA%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">数论算法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E4%BA%8C%E3%80%81%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E4%B8%8E%E7%AE%97%E6%B3%95%E9%80%89%E6%8B%A9%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">十二、复杂度分析与算法选择建议</span></a></li></ol></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"LeetCode-42接雨水","uid":"50923e38d6714eed297b6e077bc9df21","slug":"LeetCode/LeetCode-42接雨水","date":"2025-07-16T08:00:00.000Z","updated":"2025-07-19T11:56:57.730Z","comments":true,"path":"api/articles/LeetCode/LeetCode-42接雨水.json","keywords":null,"cover":null,"text":" 题目链接：LeetCode - 42. Trapping Rain Water 解法一：相向双指针题目思路：双指针法 + 局部最值本题的目标是，给定一个整数数...","permalink":"/post/LeetCode/LeetCode-42接雨水","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}