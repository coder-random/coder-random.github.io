{"title":"LeetCode-912排序数组","uid":"94d081a5c7789012b1a36e6503ab4408","slug":"LeetCode/LeetCode-912排序数组","date":"2025-07-18T08:00:00.000Z","updated":"2025-07-18T09:10:10.642Z","comments":true,"path":"api/articles/LeetCode/LeetCode-912排序数组.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://leetcode.cn/problems/sort-an-array/\">LeetCode - 912. 排序数组</a></p></blockquote>\n<h2 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h2><p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。你必须在 <strong>不使用任何内置函数</strong> 的情况下解决问题，时间复杂度为 <strong>O(n log n)</strong>，并且空间复杂度尽可能小。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>输入：</strong> nums &#x3D; <code>[5,2,3,1]</code><br><strong>输出：</strong> <code>[1,2,3,5]</code></p></blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>输入：</strong> nums &#x3D; <code>[5,1,1,2,0,0]</code><br><strong>输出：</strong> <code>[0,0,1,1,2,5]</code></p></blockquote>\n<hr>\n<h2 id=\"解法一：快速排序\"><a href=\"#解法一：快速排序\" class=\"headerlink\" title=\"解法一：快速排序\"></a>解法一：快速排序</h2><p>不了解快速排序的可以先看（<a href=\"https://coder-random.github.io/2025/07/18/AlgorithmsDataStructures/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/\">快速排序（点击跳转）</a>）</p>\n<p>这道题要求我们对一个整数数组进行升序排序，并明确限制了不能使用内置排序函数，同时要求时间复杂度为 O(n log n)，空间复杂度尽可能小。<strong>快速排序</strong> 是满足这些要求的经典算法之一，尤其适合作为本题的解法。</p>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>我们将采用 <strong>快速排序（Quick Sort）</strong> 算法，它是一种基于 <strong>分治</strong> 思想的高效排序算法，其核心步骤如下：</p>\n<ol>\n<li><p><strong>分区 (Partition)</strong>：从数组中选择一个元素作为“基准”（pivot）。为了避免在数组已有序或近乎有序时出现 O(n²) 的最坏情况，我们 <strong>随机选择</strong> 一个基准。然后，重新排列数组，使得所有小于基准的元素都移动到基准的左边，所有大于等于基准的元素都移动到右边。操作结束后，该基准元素就位于其最终的有序位置。</p>\n</li>\n<li><p><strong>递归 (Recurse)</strong>：对基准左侧和右侧的两个子数组，递归地应用快速排序。</p>\n</li>\n<li><p><strong>终止条件</strong>：当子数组的长度为 0 或 1 时，它天然是有序的，递归结束。</p>\n</li>\n</ol>\n<p>通过这种方式，一个大问题被不断地分解成小问题来解决，最终完成整个数组的排序。</p>\n<h3 id=\"代码实现-C\"><a href=\"#代码实现-C\" class=\"headerlink\" title=\"代码实现 (C++)\"></a>代码实现 (C++)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化随机种子，以确保每次运行的随机性，避免最坏情况</span></span><br><span class=\"line\">        <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>)); </span><br><span class=\"line\">        <span class=\"built_in\">quickSort</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 对数组 nums 的 [low, high] 区间进行快速排序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 终止条件：当子数组只有一个元素或为空时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &gt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找到基准元素的正确位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> pivotIndex = <span class=\"built_in\">partition</span>(nums, low, high);</span><br><span class=\"line\">        <span class=\"comment\">// 递归地对基准左侧的子数组进行排序</span></span><br><span class=\"line\">        <span class=\"built_in\">quickSort</span>(nums, low, pivotIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 递归地对基准右侧的子数组进行排序</span></span><br><span class=\"line\">        <span class=\"built_in\">quickSort</span>(nums, pivotIndex + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @brief 分区操作，并返回基准元素的最终索引</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> low, <span class=\"type\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 随机选择一个基准，并将其与区间的最后一个元素交换</span></span><br><span class=\"line\">        <span class=\"comment\">//    这样做可以有效避免最坏情况的发生</span></span><br><span class=\"line\">        <span class=\"type\">int</span> randomIndex = low + <span class=\"built_in\">rand</span>() % (high - low + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(nums[randomIndex], nums[high]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> pivot = nums[high]; <span class=\"comment\">// 将最后一个元素作为基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> i = low; <span class=\"comment\">// i 指向下一个小于基准的元素应该存放的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 遍历数组，将小于基准的元素移动到 i 指针的左侧</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j] &lt; pivot) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(nums[i], nums[j]);</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 3. 将基准元素放到它的最终位置 (i)</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(nums[i], nums[high]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> i; <span class=\"comment\">// 返回基准元素的索引</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","text":" LeetCode - 912. 排序数组 题目描述：给你一个整数数组 nums，请你将该数组升序排列。你必须在 不使用任何内置函数 的情况下解决问题，时间复杂...","permalink":"/post/LeetCode/LeetCode-912排序数组","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">题目描述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">解法一：快速排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">算法思想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-C\"><span class=\"toc-text\">代码实现 (C++)</span></a></li></ol></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"LeetCode-21合并两个有序链表","uid":"ceb487e3836d4783d6609198e2dba7d6","slug":"LeetCode/LeetCode-21合并两个有序链表","date":"2025-07-19T08:00:00.000Z","updated":"2025-07-19T11:55:53.724Z","comments":true,"path":"api/articles/LeetCode/LeetCode-21合并两个有序链表.json","keywords":null,"cover":null,"text":" 题目链接：LeetCode 21. Merge Two Sorted Lists 题目描述给你两个 升序 链表 list1 和 list2，请将它们合并为一个...","permalink":"/post/LeetCode/LeetCode-21合并两个有序链表","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"冒泡排序（Bubble Sort）","uid":"dea48bae008655416810ebc549cb2ffd","slug":"AlgorithmsDataStructures/排序算法/冒泡排序","date":"2025-07-18T04:00:00.000Z","updated":"2025-07-18T08:41:18.801Z","comments":true,"path":"api/articles/AlgorithmsDataStructures/排序算法/冒泡排序.json","keywords":null,"cover":null,"text":"冒泡排序（Bubble Sort）冒泡排序是一种简单直观的排序算法。它重复地遍历待排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历数列的工...","permalink":"/post/AlgorithmsDataStructures/排序算法/冒泡排序","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"算法与数据结构","slug":"算法与数据结构","count":3,"path":"api/categories/算法与数据结构.json"},{"name":"排序算法","slug":"算法与数据结构/排序算法","count":2,"path":"api/categories/算法与数据结构/排序算法.json"}],"tags":[{"name":"排序","slug":"排序","count":2,"path":"api/tags/排序.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}