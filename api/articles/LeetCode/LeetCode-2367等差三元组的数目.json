{"title":"LeetCode-2367等差三元组的数目","uid":"f01cc273b0b1b737816c95524ea0b79c","slug":"LeetCode/LeetCode-2367等差三元组的数目","date":"2025-07-17T08:00:00.000Z","updated":"2025-07-18T09:10:16.682Z","comments":true,"path":"api/articles/LeetCode/LeetCode-2367等差三元组的数目.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题目链接：<br><a href=\"https://leetcode.cn/problems/number-of-arithmetic-triplets/description/\">LeetCode - 2367.Number of Arithmetic Triplets</a></p></blockquote>\n<h2 id=\"解法一：三指针\"><a href=\"#解法一：三指针\" class=\"headerlink\" title=\"解法一：三指针\"></a>解法一：三指针</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个严格递增的整数数组 <code>nums</code> 和一个正整数 <code>diff</code>，请统计满足以下条件的三元组 <code>(i, j, k)</code> 的数量：</p>\n<ul>\n<li>三个下标满足：<code>i &lt; j &lt; k</code></li>\n<li>数组元素满足：<code>nums[j] - nums[i] == diff</code> 且 <code>nums[k] - nums[j] == diff</code></li>\n</ul>\n<p>换句话说，就是寻找等差数列长度为 3 的子序列个数，且公差为 <code>diff</code>。</p>\n<hr>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><ul>\n<li>输入数组 <code>nums</code> 是严格递增的，这意味着 <code>nums[i] &lt; nums[j] &lt; nums[k]</code> 对于所有 <code>i &lt; j &lt; k</code> 都成立。</li>\n<li>题目核心就是寻找满足 <code>nums[j] = nums[i] + diff</code> 且 <code>nums[k] = nums[j] + diff</code> 的三元组。</li>\n<li>简单的暴力解法是三重循环枚举所有 <code>(i, j, k)</code>，时间复杂度为 O(n³)，在数据量较大时会超时。</li>\n<li>如何利用数组的有序特性，优化搜索过程？</li>\n</ul>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ul>\n<li>使用三个指针 <code>i</code>, <code>j</code>, <code>k</code> 分别表示三元组的三个位置。</li>\n<li>指针初始设置为：<code>i = 0</code>, <code>j = 1</code>, <code>k = 2</code>。</li>\n<li>固定 <code>k</code> 从索引 2 开始遍历，表示当前考察的三元组末尾元素。</li>\n<li>利用数组有序的特性，调整 <code>j</code> 和 <code>i</code> 指针使其满足：<ul>\n<li><code>nums[j] + diff == nums[k]</code></li>\n<li><code>nums[i] + diff == nums[j]</code></li>\n</ul>\n</li>\n<li>如果满足条件，则计数增加。</li>\n<li>指针只会向前移动，不回退，保证了时间复杂度为 O(n)。</li>\n</ul>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><ul>\n<li>对于每个 <code>k</code>（从 2 开始）：<ul>\n<li>移动 <code>j</code>，使得 <code>nums[j] + diff &gt;= nums[k]</code>。</li>\n<li>如果 <code>nums[j] + diff &gt; nums[k]</code>，则该 <code>k</code> 不满足条件，跳过。</li>\n<li>否则，移动 <code>i</code>，使得 <code>nums[i] + diff &gt;= nums[j]</code>。</li>\n<li>如果 <code>nums[i] + diff == nums[j]</code>，说明找到一个满足条件的三元组，计数加 1。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">arithmeticTriplets</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> diff)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">2</span>; k &lt; nums.<span class=\"built_in\">size</span>(); k++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移动j指针，直到 nums[j] + diff &gt;= nums[k]</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] + diff &lt; nums[k]) ++j;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果 nums[j] + diff 不等于 nums[k]，继续下一个 k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == k || nums[j] + diff &gt; nums[k]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 移动i指针，直到 nums[i] + diff &gt;= nums[j]</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; nums[i] + diff &lt; nums[j]) ++i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果 nums[i] + diff 等于 nums[j]，说明找到一个等差三元组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j &amp;&amp; nums[i] + diff == nums[j]) ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解法二：哈希表\"><a href=\"#解法二：哈希表\" class=\"headerlink\" title=\"解法二：哈希表\"></a>解法二：哈希表</h2><ul>\n<li>由于数组严格递增，也可以使用哈希集合保存所有元素。</li>\n<li>遍历数组元素 <code>num</code>，判断 <code>num + diff</code> 和 <code>num + 2 * diff</code> 是否存在。</li>\n<li>这种方法代码更简洁，时间复杂度仍为 O(n)，空间换时间。</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">arithmeticTriplets</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> diff)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">unordered_set&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">s</span><span class=\"params\">(nums.begin(), nums.end())</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">count</span>(num + diff) &amp;&amp; s.<span class=\"built_in\">count</span>(num + <span class=\"number\">2</span> * diff)) &#123;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对比双指针和哈希法\"><a href=\"#对比双指针和哈希法\" class=\"headerlink\" title=\"对比双指针和哈希法\"></a>对比双指针和哈希法</h3><ul>\n<li>双指针方法不需要额外空间，适合对空间敏感的场景。</li>\n<li>哈希方法代码更简洁，查找速度快，但需额外空间。</li>\n<li>选择合适的方法依据具体场景和数据规模。</li>\n</ul>\n","text":" 题目链接：LeetCode - 2367.Number of Arithmetic Triplets 解法一：三指针题目描述给定一个严格递增的整数数组 num...","permalink":"/post/LeetCode/LeetCode-2367等差三元组的数目","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E4%B8%89%E6%8C%87%E9%92%88\"><span class=\"toc-text\">解法一：三指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">问题分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">具体步骤</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%BA%8C%EF%BC%9A%E5%93%88%E5%B8%8C%E8%A1%A8\"><span class=\"toc-text\">解法二：哈希表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E5%8F%8C%E6%8C%87%E9%92%88%E5%92%8C%E5%93%88%E5%B8%8C%E6%B3%95\"><span class=\"toc-text\">对比双指针和哈希法</span></a></li></ol></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"快速排序（Quick Sort）","uid":"128d5f401a6627e4435b6e43e76ac072","slug":"AlgorithmsDataStructures/排序算法/快速排序","date":"2025-07-18T04:00:00.000Z","updated":"2025-07-28T11:45:34.929Z","comments":true,"path":"api/articles/AlgorithmsDataStructures/排序算法/快速排序.json","keywords":null,"cover":null,"text":"快速排序（Quick Sort）快速排序（Quick Sort）是一种极其高效的分治排序算法，也是实际应用中最常用的排序算法之一。它通过选择一个“基准”元素，将...","permalink":"/post/AlgorithmsDataStructures/排序算法/快速排序","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"算法与数据结构","slug":"算法与数据结构","count":3,"path":"api/categories/算法与数据结构.json"}],"tags":[{"name":"排序","slug":"排序","count":2,"path":"api/tags/排序.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LeetCode-42接雨水","uid":"50923e38d6714eed297b6e077bc9df21","slug":"LeetCode/LeetCode-42接雨水","date":"2025-07-16T08:00:00.000Z","updated":"2025-07-19T11:56:57.730Z","comments":true,"path":"api/articles/LeetCode/LeetCode-42接雨水.json","keywords":null,"cover":null,"text":" 题目链接：LeetCode - 42. Trapping Rain Water 解法一：相向双指针题目思路：双指针法 + 局部最值本题的目标是，给定一个整数数...","permalink":"/post/LeetCode/LeetCode-42接雨水","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}