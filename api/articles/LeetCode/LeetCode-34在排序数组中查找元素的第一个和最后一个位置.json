{"title":"LeetCode-34在排序数组中查找元素的第一个和最后一个位置","uid":"c8e3ec39a2bdb46713f60afe507c2dde","slug":"LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置","date":"2025-07-22T08:00:00.000Z","updated":"2025-07-28T13:32:27.599Z","comments":true,"path":"api/articles/LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题目链接：<br><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\"> LeetCode 34. Find First and Last Position of Element in Sorted Array</a></p></blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums</code>，以及一个整数 <code>target</code>，请找出 <code>target</code> 在数组中出现的 <strong>第一个</strong> 和 <strong>最后一个位置</strong>。</p>\n<ul>\n<li>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</li>\n<li>要求时间复杂度为 <strong>O(log n)</strong>，使用<strong>二分查找</strong>。</li>\n</ul>\n<hr>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h3 id=\"本质是二分查找的两次应用：\"><a href=\"#本质是二分查找的两次应用：\" class=\"headerlink\" title=\"本质是二分查找的两次应用：\"></a>本质是二分查找的两次应用：</h3><ol>\n<li><strong>第一次二分查找</strong>：找出目标值 <code>target</code> 的<strong>左边界</strong>（第一个等于 <code>target</code> 的位置）。</li>\n<li><strong>第二次二分查找</strong>：找出目标值 <code>target</code> 的<strong>右边界</strong>（最后一个等于 <code>target</code> 的位置）。</li>\n</ol>\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h3><ul>\n<li>数组可能不存在 <code>target</code>，需单独判断。</li>\n<li>二分写法需根据使用的是哪种区间（闭区间、左闭右开、开区间）进行<strong>边界调整</strong>。</li>\n</ul>\n<hr>\n<h2 id=\"解法一：左闭右闭区间-left-right\"><a href=\"#解法一：左闭右闭区间-left-right\" class=\"headerlink\" title=\"解法一：左闭右闭区间 [left, right]\"></a>解法一：左闭右闭区间 <code>[left, right]</code></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 查找 target 的左边界（第一个等于 target 的位置）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findLeft</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;  <span class=\"comment\">// 左闭右闭区间 [left, right]</span></span><br><span class=\"line\">            <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;  <span class=\"comment\">// target 在右边</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>; <span class=\"comment\">// 向左收缩（即使等于也继续左边找）</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 检查 left 是否越界 或 是否是 target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; nums.<span class=\"built_in\">size</span>() &amp;&amp; nums[left] == target) <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找 target 的右边界（最后一个等于 target 的位置）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findRight</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt;= right) &#123;  <span class=\"comment\">// 左闭右闭区间 [left, right]</span></span><br><span class=\"line\">            <span class=\"type\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>; <span class=\"comment\">// target 在左边</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;  <span class=\"comment\">// 向右收缩（即使等于也继续右边找）</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 检查 right 是否越界 或 是否是 target</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt;= <span class=\"number\">0</span> &amp;&amp; nums[right] == target) <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主函数：返回目标值的起始和结束位置</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">searchRange</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left = <span class=\"built_in\">findLeft</span>(nums, target);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;  <span class=\"comment\">// target 不存在</span></span><br><span class=\"line\">        <span class=\"type\">int</span> right = <span class=\"built_in\">findRight</span>(nums, target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;left, right&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"解法二：左闭右开区间：待更新\"><a href=\"#解法二：左闭右开区间：待更新\" class=\"headerlink\" title=\"解法二：左闭右开区间：待更新\"></a>解法二：左闭右开区间：待更新</h2><hr>\n<h2 id=\"解法三：开区间-：待更新\"><a href=\"#解法三：开区间-：待更新\" class=\"headerlink\" title=\"解法三：开区间 ：待更新\"></a>解法三：开区间 ：待更新</h2><hr>\n<h2 id=\"示例测试用例\"><a href=\"#示例测试用例\" class=\"headerlink\" title=\"示例测试用例\"></a>示例测试用例</h2><table>\n<thead>\n<tr>\n<th>输入</th>\n<th>输出</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>nums = [5,7,7,8,8,10]</code> <code>target = 8</code></td>\n<td><code>[3,4]</code></td>\n<td>target 存在，返回区间位置</td>\n</tr>\n<tr>\n<td><code>nums = [5,7,7,8,8,10]</code> <code>target = 6</code></td>\n<td><code>[-1,-1]</code></td>\n<td>target 不存在</td>\n</tr>\n<tr>\n<td><code>nums = []</code> <code>target = 0</code></td>\n<td><code>[-1,-1]</code></td>\n<td>空数组</td>\n</tr>\n</tbody></table>\n","text":" 题目链接： LeetCode 34. Find First and Last Position of Element in Sorted Array 题目描述...","permalink":"/post/LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%9A%84%E4%B8%A4%E6%AC%A1%E5%BA%94%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">本质是二分查找的两次应用：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A\"><span class=\"toc-text\">注意事项：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E5%B7%A6%E9%97%AD%E5%8F%B3%E9%97%AD%E5%8C%BA%E9%97%B4-left-right\"><span class=\"toc-text\">解法一：左闭右闭区间 [left, right]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%BA%8C%EF%BC%9A%E5%B7%A6%E9%97%AD%E5%8F%B3%E5%BC%80%E5%8C%BA%E9%97%B4%EF%BC%9A%E5%BE%85%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">解法二：左闭右开区间：待更新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%89%EF%BC%9A%E5%BC%80%E5%8C%BA%E9%97%B4-%EF%BC%9A%E5%BE%85%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">解法三：开区间 ：待更新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">示例测试用例</span></a></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"LeetCode-744寻找比目标字母大的最小字母","uid":"1ef7b5c1febefbecd2fae064a2008e72","slug":"LeetCode/LeetCode-744寻找比目标字母大的最小字母","date":"2025-07-23T08:00:00.000Z","updated":"2025-07-28T13:32:29.322Z","comments":true,"path":"api/articles/LeetCode/LeetCode-744寻找比目标字母大的最小字母.json","keywords":null,"cover":null,"text":" 题目链接：LeetCode 744. Find Smallest Letter Greater Than Target 题目描述给定一个递增排序的字符数组 l...","permalink":"/post/LeetCode/LeetCode-744寻找比目标字母大的最小字母","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LeetCode-86分隔链表","uid":"3db473fdf9b2739246e485648c59f7e1","slug":"LeetCode/LeetCode-86分隔链表","date":"2025-07-21T08:00:00.000Z","updated":"2025-07-28T13:32:28.896Z","comments":true,"path":"api/articles/LeetCode/LeetCode-86分隔链表.json","keywords":null,"cover":null,"text":" 题目链接：LeetCode 86. Partition List 题目描述给定一个链表 head 和一个特定值 x，请将所有小于 x 的节点排在大于或等于 x...","permalink":"/post/LeetCode/LeetCode-86分隔链表","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}