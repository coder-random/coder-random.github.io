{"title":"LeetCode-21合并两个有序链表","uid":"ceb487e3836d4783d6609198e2dba7d6","slug":"LeetCode/LeetCode-21合并两个有序链表","date":"2025-07-19T08:00:00.000Z","updated":"2025-07-19T11:55:53.724Z","comments":true,"path":"api/articles/LeetCode/LeetCode-21合并两个有序链表.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题目链接：<br><a href=\"https://leetcode.cn/problems/merge-two-sorted-lists/\">LeetCode 21. Merge Two Sorted Lists</a></p></blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你两个 <strong>升序</strong> 链表 <code>list1</code> 和 <code>list2</code>，请将它们合并为一个新的 <strong>升序</strong> 链表，并返回新链表的头节点。</p>\n<hr>\n<h2 id=\"解法一：迭代\"><a href=\"#解法一：迭代\" class=\"headerlink\" title=\"解法一：迭代\"></a>解法一：迭代</h2><h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题的关键在于：两个链表已经是<strong>有序</strong>的，所以我们可以使用 <strong>双指针 + 逐步合并</strong> 的方式来构建一个新的有序链表。</p>\n<p>相比于常见的虚拟头节点解法，这段代码采用了<strong>原地合并 + 不额外创建节点</strong> 的策略，节省了空间。</p>\n<hr>\n<h3 id=\"核心逻辑解析\"><a href=\"#核心逻辑解析\" class=\"headerlink\" title=\"核心逻辑解析\"></a>核心逻辑解析</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (list1 == <span class=\"literal\">nullptr</span> || list2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list1 == <span class=\"literal\">nullptr</span> ? list2 : list1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>边界情况处理：如果有一个链表为空，直接返回另一个链表。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode* head = list1-&gt;val &gt; list2-&gt;val ? list2 : list1;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选出头结点：将两个链表中值较小的那个作为合并后链表的头。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ListNode* cur1 = head-&gt;next;</span><br><span class=\"line\">ListNode* cur2 = (head == list1) ? list2 : list1;</span><br><span class=\"line\">ListNode* pre = head;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化指针：<ul>\n<li><code>cur1</code> 是当前主链表（较小值所在链表）后继；</li>\n<li><code>cur2</code> 是另一个链表；</li>\n<li><code>pre</code> 记录新链表的构建位置。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"循环合并过程\"><a href=\"#循环合并过程\" class=\"headerlink\" title=\"循环合并过程\"></a>循环合并过程</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (cur1 != <span class=\"literal\">nullptr</span> &amp;&amp; cur2 != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cur1-&gt;val &gt; cur2-&gt;val) &#123;</span><br><span class=\"line\">        pre-&gt;next = cur2;</span><br><span class=\"line\">        cur2 = cur2-&gt;next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pre-&gt;next = cur1;</span><br><span class=\"line\">        cur1 = cur1-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre = pre-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每次将当前值较小的节点接到 <code>pre</code> 后，并移动相应指针。</li>\n</ul>\n<hr>\n<h3 id=\"拼接剩余链表\"><a href=\"#拼接剩余链表\" class=\"headerlink\" title=\"拼接剩余链表\"></a>拼接剩余链表</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pre-&gt;next = cur1 != <span class=\"literal\">nullptr</span> ? cur1 : cur2;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当有一个链表已经走完，直接将另一个剩下的部分接在后面。</li>\n</ul>\n<hr>\n<h3 id=\"完整代码（C-）\"><a href=\"#完整代码（C-）\" class=\"headerlink\" title=\"完整代码（C++）\"></a>完整代码（C++）</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list1 == <span class=\"literal\">nullptr</span> || list2 == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1 == <span class=\"literal\">nullptr</span> ? list2 : list1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode* head = list1-&gt;val &gt; list2-&gt;val ? list2 : list1;</span><br><span class=\"line\">        ListNode* cur1 = head-&gt;next;</span><br><span class=\"line\">        ListNode* cur2 = (head == list1) ? list2 : list1;</span><br><span class=\"line\">        ListNode* pre = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur1 != <span class=\"literal\">nullptr</span> &amp;&amp; cur2 != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur1-&gt;val &gt; cur2-&gt;val) &#123;</span><br><span class=\"line\">                pre-&gt;next = cur2;</span><br><span class=\"line\">                cur2 = cur2-&gt;next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pre-&gt;next = cur1;</span><br><span class=\"line\">                cur1 = cur1-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = pre-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre-&gt;next = cur1 != <span class=\"literal\">nullptr</span> ? cur1 : cur2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这段代码技巧性强，<strong>不使用虚拟头节点</strong>，而是从一开始就选定一个较小节点作为 <code>head</code>，在效率和空间上都表现优秀</p>\n","text":" 题目链接：LeetCode 21. Merge Two Sorted Lists 题目描述给你两个 升序 链表 list1 和 list2，请将它们合并为一个...","permalink":"/post/LeetCode/LeetCode-21合并两个有序链表","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E8%BF%AD%E4%BB%A3\"><span class=\"toc-text\">解法一：迭代</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解题思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">核心逻辑解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%90%88%E5%B9%B6%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">循环合并过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%BC%E6%8E%A5%E5%89%A9%E4%BD%99%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">拼接剩余链表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%EF%BC%88C-%EF%BC%89\"><span class=\"toc-text\">完整代码（C++）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"LeetCode-2两数相加","uid":"2e0b75e87a11aa9fe9b055b9179f2839","slug":"LeetCode/LeetCode-2两数相加","date":"2025-07-20T08:00:00.000Z","updated":"2025-07-22T11:47:56.039Z","comments":true,"path":"api/articles/LeetCode/LeetCode-2两数相加.json","keywords":null,"cover":null,"text":" 题目链接： LeetCode 2. Add Two Numbers） 题目描述给你两个 非空 的链表 l1 和 l2，它们表示两个 非负整数，每位数字都是逆序...","permalink":"/post/LeetCode/LeetCode-2两数相加","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LeetCode-912排序数组","uid":"94d081a5c7789012b1a36e6503ab4408","slug":"LeetCode/LeetCode-912排序数组","date":"2025-07-18T08:00:00.000Z","updated":"2025-07-18T09:10:10.642Z","comments":true,"path":"api/articles/LeetCode/LeetCode-912排序数组.json","keywords":null,"cover":null,"text":" LeetCode - 912. 排序数组 题目描述：给你一个整数数组 nums，请你将该数组升序排列。你必须在 不使用任何内置函数 的情况下解决问题，时间复杂...","permalink":"/post/LeetCode/LeetCode-912排序数组","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}