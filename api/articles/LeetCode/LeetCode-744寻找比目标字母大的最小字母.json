{"title":"LeetCode-744寻找比目标字母大的最小字母","uid":"1ef7b5c1febefbecd2fae064a2008e72","slug":"LeetCode/LeetCode-744寻找比目标字母大的最小字母","date":"2025-07-23T08:00:00.000Z","updated":"2025-07-28T13:32:29.322Z","comments":true,"path":"api/articles/LeetCode/LeetCode-744寻找比目标字母大的最小字母.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>题目链接：<br><a href=\"https://leetcode.cn/problems/find-smallest-letter-greater-than-target/solutions/\">LeetCode 744. Find Smallest Letter Greater Than Target</a></p></blockquote>\n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个递增排序的字符数组 <code>letters</code>（<strong>可能包含环绕</strong>），和一个目标字符 <code>target</code>，要求返回<strong>数组中大于 <code>target</code> 的最小字符</strong>。</p>\n<p>若不存在满足条件的字符，则返回 <strong>letters[0]</strong>，即“<strong>首位环绕</strong>”。</p>\n<hr>\n<h2 id=\"解法一：二分\"><a href=\"#解法一：二分\" class=\"headerlink\" title=\"解法一：二分\"></a>解法一：二分</h2><p>这是一个<strong>经典的二分查找问题</strong>，目标是找出 <strong>第一个大于 target 的字符</strong>。可以直接套用「<strong>变形版 upper_bound 模板</strong>」，即：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (letters[mid] &lt;= target) &#123;</span><br><span class=\"line\">    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当 <code>letters[mid] &lt;= target</code>：说明 mid 及其左侧都不符合要求，目标在右边 → <code>l = mid + 1</code></li>\n<li>当 <code>letters[mid] &gt; target</code>：mid 是一个候选答案，尝试向左搜索更小的 → <code>r = mid - 1</code></li>\n</ul>\n<p>最后循环结束时，<code>l</code> 会指向第一个满足 <code>letters[l] &gt; target</code> 的元素。</p>\n<hr>\n<h2 id=\"环绕处理\"><a href=\"#环绕处理\" class=\"headerlink\" title=\"环绕处理\"></a>环绕处理</h2><p>当 target 大于等于所有字符时，<code>l</code> 会超出数组长度（即 <code>l == letters.size()</code>），这时应该返回数组开头的字符 <code>letters[0]</code>。</p>\n<p>代码中用到了：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">letters[l % letters.<span class=\"built_in\">size</span>()]</span><br></pre></td></tr></table></figure>\n\n<p>这个技巧巧妙地利用取模操作实现了<strong>首尾环绕处理</strong>，可以避免边界判断。</p>\n<hr>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">nextGreatestLetter</span><span class=\"params\">(vector&lt;<span class=\"type\">char</span>&gt;&amp; letters, <span class=\"type\">char</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = letters.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = l + ((r - l) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (letters[mid] &lt;= target) &#123;</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> letters[l % letters.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>输入：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">letters = [<span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;j&#x27;</span>], target = <span class=\"string\">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>查找过程中：</p>\n<ul>\n<li>mid &#x3D; 1 → letters[1]&#x3D;’f’ &gt; ‘d’，缩小右边界 r&#x3D;0</li>\n<li>mid &#x3D; 0 → letters[0]&#x3D;’c’ &lt;&#x3D; ‘d’，l&#x3D;1</li>\n<li>循环结束，l&#x3D;1，返回 letters[1]&#x3D;’f’</li>\n</ul>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这题考察的是<strong>二分搜索在查找「第一个大于目标」元素时的使用方式</strong>，配合 <code>% letters.size()</code> 做环绕处理，逻辑清晰又简洁</p>\n","text":" 题目链接：LeetCode 744. Find Smallest Letter Greater Than Target 题目描述给定一个递增排序的字符数组 l...","permalink":"/post/LeetCode/LeetCode-744寻找比目标字母大的最小字母","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E4%BA%8C%E5%88%86\"><span class=\"toc-text\">解法一：二分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E7%BB%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">环绕处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">举个例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C语言运算符","uid":"14f178cef56d02d5620710b2025709d0","slug":"Code101/004C语言运算符","date":"2025-07-27T16:00:00.000Z","updated":"2025-07-28T14:13:54.670Z","comments":true,"path":"api/articles/Code101/004C语言运算符.json","keywords":null,"cover":"/images/article-cover/Code101.png","text":" 《Code101-C语言基础》目录 先导课 从零到一：你的第一堂C语言入门课 第一课 变量和常量 第二课 printf和scanf 第三课 putchar和g...","permalink":"/post/Code101/004C语言运算符","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Code101","slug":"Code101","count":5,"path":"api/categories/Code101.json"}],"tags":[{"name":"c/cpp","slug":"c-cpp","count":5,"path":"api/tags/c-cpp.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"LeetCode-34在排序数组中查找元素的第一个和最后一个位置","uid":"c8e3ec39a2bdb46713f60afe507c2dde","slug":"LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置","date":"2025-07-22T08:00:00.000Z","updated":"2025-07-28T13:32:27.599Z","comments":true,"path":"api/articles/LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置.json","keywords":null,"cover":null,"text":" 题目链接： LeetCode 34. Find First and Last Position of Element in Sorted Array 题目描述...","permalink":"/post/LeetCode/LeetCode-34在排序数组中查找元素的第一个和最后一个位置","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":8,"path":"api/tags/LeetCode.json"}],"author":{"name":"Random","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"世界上本没有简单题，中等题刷过的人多了，就变成了简单题","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}